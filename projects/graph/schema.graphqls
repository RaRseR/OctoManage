type Status{
 id: String!
 name: String!
 projects: [Project]
}

type Project{
 id: String!
 name: String!
 text: String!
 team_ids: [String]
 teams: [Team]
 executor_ids: [String]
 executors: [Executor]
 chat: String
 created_at: String!
 completed_at: String!
 deadline: String!
 tasks: [Task]
}

type Task{
 id: String!
 name: String!
 text: String!
 project: Project!
 team_ids: [String]
 teams: [Team]
 executor_ids: [String]
 executors: [Executor]
 chat: String
 created_at: String!
 completed_at: String!
 deadline: String!
}

type Team{
 id: String!
 name: String!
 executor_ids: [String]
 executors: [Executor]
}

type Executor{
 id: String!
 name: String!
}

type Query {
 projects: [Project]!
 tasks: [Task]!
}

input CreateProjectInput {
 name: String!
 text: String!
}

input CreateTaskInput {
 project_id: String!
 name: String!
 text: String!
}

input UpdateProjectInput {
 name: String!
 text: String!
 teams: [String]
 users: [String]
 chat: String
 completed_at: String!
 deadline: String!
}

input UpdateTaskInput {
 name: String!
 text: String!
}

type Mutation {
 createProject(input: CreateProjectInput!): Project!
 createTask(input: CreateTaskInput): Task!
 updateProject(input: UpdateProjectInput): Project!
 updateTask(input: UpdateTaskInput): Task!
}